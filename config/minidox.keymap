#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define U_BASE   0
#define U_EXTRA  1
#define U_TAP    2
#define U_BUTTON 3
#define U_NAV    4
#define U_NAVNUM 5
#define U_MEDIA  6
#define U_NUM    7
#define U_SYM    8
#define U_FUN    9

#define AS(keycode) &as LS(keycode) keycode

#define U_UND &kp LC(Z)
#define U_CUT &kp LC(X)
#define U_CPY &kp LC(C)
#define U_PST &kp LC(V)
#define U_RDO &kp LC(Y)

#define U_BOOT &td_bootloader

/ {
  behaviors {
    // auto shift behavior copied from: https://github.com/serebrov/zmk-config/blob/master/config/microdox.keymap#L23-L36
    as: auto_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "AUTO_SHIFT";
        #binding-cells = <2>;
        tapping_term_ms = <150>;
        quick_tap_ms = <0>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };

    // Note: quick-release fixes the issue of sticky shift producing multiple upper case letters (see https://github.com/zmkfirmware/zmk/issues/903#issuecomment-909209198).
    skq: sticky_key_quick_release {
      compatible = "zmk,behavior-sticky-key";
      label = "STICKY_KEY_QUICK_RELEASE";
      #binding-cells = <1>;
      bindings = <&kp>;
      release-after-ms = <1000>;
      quick-release;
    };

    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <250>;
      quick-tap-ms = <150>;
      flavor = "tap-preferred";
      global-quick-tap;
      bindings = <&kp>, <&kp>;
    };

    lts: slow_layer_tap {
      compatible = "zmk,behavior-hold-tap";
      label = "SLOW_LAYER_TAP";
      #binding-cells = <2>;
      tapping-term-ms = <350>;
      quick-tap-ms = <150>;
      flavor = "tap-preferred";
      global-quick-tap;
      bindings = <&mo>, <&kp>;
    };

    ltf: fast_layer_tap {
      compatible = "zmk,behavior-hold-tap";
      label = "FAST_LAYER_TAP";
      #binding-cells = <2>;
      tapping-term-ms = <190>;
      quick-tap-ms = <150>;
      flavor = "tap-preferred";
      global-quick-tap;
      bindings = <&mo>, <&kp>;
    };

    td_shift_ret: sticky_shift_return { \
      compatible = "zmk,behavior-tap-dance"; \
      label = "STICKY_SHIFT_RETURN"; \
      #binding-cells = <0>; \
      tapping-term-ms = <200>; \
      bindings = <&skq LSHFT>, <&kp RET>; \
    }; \

    td_num_esc: sticky_num_esc { \
      compatible = "zmk,behavior-tap-dance"; \
      label = "STICKY_NUM_ESC"; \
      #binding-cells = <0>; \
      tapping-term-ms = <200>; \
      bindings = <&sl U_NUM>, <&kp ESC>; \
    }; \

    td_bootloader: double_tap_bootloader { \
      compatible = "zmk,behavior-tap-dance"; \
      label = "TD_BOOTLOADER"; \
      #binding-cells = <0>; \
      tapping-term-ms = <200>; \
      bindings = <&none>, <&bootloader>; \
    }; \

    u_to_U_BASE: double_tap_to_u_base { \
      compatible = "zmk,behavior-tap-dance"; \
      label = "DOUBLE_TAP_TO_U_BASE"; \
      #binding-cells = <0>; \
      tapping-term-ms = <200>; \
      bindings = <&none>, <&to U_BASE>; \
    }; \

    u_to_U_EXTRA: double_tap_to_u_extra { \
      compatible = "zmk,behavior-tap-dance"; \
      label = "DOUBLE_TAP_TO_U_EXTRA"; \
      #binding-cells = <0>; \
      tapping-term-ms = <200>; \
      bindings = <&none>, <&to U_EXTRA>; \
    }; \

    u_to_U_TAP: double_tap_to_u_tap { \
      compatible = "zmk,behavior-tap-dance"; \
      label = "DOUBLE_TAP_TO_U_TAP"; \
      #binding-cells = <0>; \
      tapping-term-ms = <200>; \
      bindings = <&none>, <&to U_TAP>; \
    }; \

    u_to_U_NAVNUM: double_tap_to_u_navnum { \
      compatible = "zmk,behavior-tap-dance"; \
      label = "DOUBLE_TAP_TO_U_NAVNUM"; \
      #binding-cells = <0>; \
      tapping-term-ms = <200>; \
      bindings = <&none>, <&to U_NAVNUM>; \
    }; \
  }; \

  macros {
    ZMK_MACRO(colonq,
        wait-ms = <50>;
        tap-ms = <40>;
        bindings = <&kp COLON &kp Q>;
    )
    ZMK_MACRO(colonwq,
        wait-ms = <50>;
        tap-ms = <40>;
        bindings = <&kp COLON &kp W &kp Q>;
    )
    ZMK_MACRO(colonqex,
        wait-ms = <50>;
        tap-ms = <40>;
        bindings = <&kp COLON &kp Q &kp EXCL>;
    )
    ZMK_MACRO(leftarr,
        wait-ms = <50>;
        tap-ms = <40>;
        bindings = <&kp LT &kp MINUS>;
    )
    ZMK_MACRO(rightarr,
        wait-ms = <50>;
        tap-ms = <40>;
        bindings = <&kp MINUS &kp GT>;
    )
    ZMK_MACRO(ellipsis,
        wait-ms = <50>;
        tap-ms = <40>;
        bindings = <&kp DOT &kp DOT &kp DOT>;
    )
    ZMK_MACRO(paren_macro,
        wait-ms = <50>;
        tap-ms = <40>;
        bindings = <&kp LPAR &kp RPAR &kp LEFT>;
    )
    ZMK_MACRO(bkt_macro,
        wait-ms = <50>;
        tap-ms = <40>;
        bindings = <&kp LBKT &kp RBKT &kp LEFT>;
    )
    ZMK_MACRO(brc_macro,
        wait-ms = <50>;
        tap-ms = <40>;
        bindings = <&kp LBRC &kp RBRC &kp LEFT>;
    )
    ZMK_MACRO(dqt_macro,
        wait-ms = <50>;
        tap-ms = <40>;
        bindings = <&kp DQT &kp DQT &kp LEFT>;
    )
    ZMK_MACRO(angbrc_macro,
        wait-ms = <50>;
        tap-ms = <40>;
        bindings = <&kp LT &kp GT &kp LEFT>;
    )
  };

  combos {
    compatible = "zmk,combos";

    combo_volmute {
        timeout-ms = <30>;
        key-positions = <10 22>;
        bindings = <&kp C_MUTE>;
    };

    combo_voldn {
        timeout-ms = <30>;
        key-positions = <11 23>;
        bindings = <&kp C_VOL_DN>;
    };

    combo_volup {
        timeout-ms = <30>;
        key-positions = <12 24>;
        bindings = <&kp C_VOL_UP>;
    };

    combo_pworkspace {
        timeout-ms = <30>;
        key-positions = <13 25>;
        bindings = <&kp LC(LG(LEFT))>;
    };

    combo_nworkspace {
        timeout-ms = <30>;
        key-positions = <14 26>;
        bindings = <&kp LC(LG(RIGHT))>;
    };
  };


  keymap {
    compatible = "zmk,keymap";

                base_layer {
                      bindings = <
&kp Q            &kp W           &kp F           &kp P           &kp G          &kp J          &kp L           &kp U           &kp Y             &kp SQT
&hm LGUI A       &hm LALT R      &hm LCTRL S     &hm LSHFT T     &kp D          &kp H          &hm LSHFT N     &hm LCTRL E     &hm LALT I        &hm LGUI O
&lts U_BUTTON Z  &lts U_FUN X    &hm RALT C      &ltf U_SYM V    &kp B          &kp K          &kp M           &kp BSPC        &lts U_MEDIA DOT  &lts U_BUTTON COMMA
                                 &kp LA(TAB)     &td_num_esc     &td_shift_ret  &ltf U_NAV SPC &ltf U_NAV SPC  &key_repeat
                        >;
                };

                extra_layer {
                      bindings = <
&kp Q            &kp W          &kp E           &kp R           &kp T          &kp Y          &kp U           &kp I          &kp O            &kp P
&hm LGUI A       &hm LALT S     &hm LCTRL D     &hm LSHFT F     &kp G          &kp H          &hm LSHFT J     &hm LCTRL K    &hm LALT L       &hm LGUI SQT
&lts U_BUTTON Z  &lts U_FUN X   &hm RALT C      &ltf U_SYM V    &kp B          &kp N          &kp M           &kp COMMA      &lts U_MEDIA DOT &lts U_BUTTON SLASH
                                &kp LA(TAB)     &td_num_esc     &td_shift_ret  &ltf U_NAV SPC &ltf U_NAV SPC  &key_repeat
                        >;
                };

                tap_layer {
                      bindings = <
&kp Q  &kp W     &kp F     &kp P        &kp G          &kp J          &kp L          &kp U           &kp Y         &kp SQT
&kp A  &kp R     &kp S     &kp T        &kp D          &kp H          &kp N          &kp E           &kp I         &kp O
&kp Z  &kp X     &kp C     &kp V        &kp B          &kp K          &kp M          &kp BSPC        &kp DOT       &kp COMMA
                           &kp LA(TAB)  &td_num_esc    &td_shift_ret  &ltf U_NAV SPC &ltf U_NAV SPC  &key_repeat
                        >;
                };

                button_layer {
                      bindings = <
&colonq     &colonwq    &colonqex  &none      &none   &none           &none        &none          &kp LPAR     &kp RPAR
&kp RA(Q)   &kp RA(P)   &kp RA(S)  &kp RA(Y)  &none   &angbrc_macro   &dqt_macro   &paren_macro   &bkt_macro   &brc_macro
U_UND       U_CUT       U_CPY      U_PST      U_RDO   &kp LT          &leftarr     &ellipsis      &rightarr    &kp GT
                        &none      &none      &none   &none           &none        &none
                        >;
                };

                nav_layer {
                      bindings = <
&kp PG_UP   &kp HOME    &kp UP      &kp END     &kp INS          &none  &u_to_U_BASE    &u_to_U_EXTRA     &u_to_U_TAP  U_BOOT
&kp PG_DN   &kp LEFT    &kp DOWN    &kp RIGHT   &caps_word       &none  &kp LSHFT       &kp LCTRL         &kp LALT     &kp LGUI
&kp BSPC    U_CUT       U_CPY       U_PST       &kp DEL          &none  &u_to_U_NAVNUM  &u_to_U_NAVNUM    &none        &none
                        &kp DEL     &kp K_APP   &kp RET          &none  &trans          &none
                        >;
                };

                navnum_layer {
                      bindings = <
AS(LBKT)   AS(N7)  AS(N8)  AS(N9)   AS(RBKT)           &kp INS           &kp HOME    &kp UP      &kp END     &kp PG_UP
AS(SEMI)   AS(N4)  AS(N5)  AS(N6)   AS(EQL)            &u_to_U_BASE      &kp LEFT    &kp DOWN    &kp RIGHT   &kp PG_DN
AS(GRAVE)  AS(N1)  AS(N2)  AS(N3)   AS(BSLH)           &kp DEL           U_PST       U_CPY       U_CUT       &kp BSPC
                   &kp DOT AS(N0)   AS(MINUS)          &ltf U_BASE SPACE &kp LSHFT   &kp LCTRL
                        >;
                };

                media_layer {
                      bindings = <
&bt BT_CLR   &none        &kp C_VOL_UP &none        &none           &none   &u_to_U_BASE   &u_to_U_EXTRA  &u_to_U_TAP  U_BOOT
&none        &kp C_PREV   &kp C_VOL_DN &kp C_NEXT   &none           &none   &kp LSHFT      &kp LCTRL      &kp LALT     &kp LGUI
&bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &out OUT_TOG    &none   &u_to_U_NAVNUM &u_to_U_NAVNUM &trans       &none
                          &kp C_MUTE   &kp C_PP     &kp C_STOP      &none   &none          &none
                        >;
                };

                num_layer {
                      bindings = <
&kp QMARK  &kp SLASH  &kp TAB    &kp DEL    &kp COLON     AS(LBKT)   AS(N7)     AS(N8)  AS(N9)  AS(RBKT)
&kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT  &kp SEMI      AS(EQL)    AS(N1)     AS(N2)  AS(N3)  AS(N0)
U_UND      U_CUT      U_CPY      U_PST      U_RDO         AS(BSLH)   AS(N4)     AS(N5)  AS(N6)  AS(GRAVE)
                      &kp ESC    &trans     &kp ASTRK     &kp UNDER  AS(MINUS)  &kp DOT
                        >;
                };

                sym_layer {
                      bindings = <
U_BOOT   &u_to_U_TAP  &u_to_U_EXTRA  &u_to_U_BASE  &none    &kp LBRC   &kp AMPS  &kp ASTRK  &kp LPAR   &kp RBRC
&kp LGUI &kp LALT     &kp LCTRL      &kp LSHFT     &none    &kp PLUS   &kp EXCL  &kp AT     &kp HASH   &kp RPAR
&none    &none        &kp RALT       &trans        &none    &kp PIPE   &kp DLLR  &kp PRCT   &kp CRRT   &kp TILDE
                      &none          &none         &none    &kp COLON  &kp SEMI  &none
                        >;
                };

                fun_layer {
                      bindings = <
U_BOOT    &u_to_U_TAP  &u_to_U_EXTRA  &u_to_U_BASE  &none     &kp PSCRN        &kp F7   &kp F8   &kp F9   &kp F12
&kp LGUI  &kp LALT     &kp LCTRL      &kp LSHFT     &none     &kp SLCK         &kp F1   &kp F2   &kp F3   &kp F10
&none     &trans       &kp RALT       &none         &none     &kp PAUSE_BREAK  &kp F4   &kp F5   &kp F6   &kp F11
                       &none          &none         &none     &kp TAB          &kp SPC  &kp ESC
                        >;
                };
  };
};
