#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define U_BASE   0
#define U_QWERTY 1
#define U_EXP    2
#define U_MACRO  3
#define U_NAV    4
#define U_MEDIA  5
#define U_NUM    6
#define U_SYM    7
#define U_FUN    8

#define AS(keycode) &as LS(keycode) keycode

#define U_UND &kp LC(Z)
#define U_CUT &kp LC(X)
#define U_CPY &kp LC(C)
#define U_PST &kp LC(V)
#define U_RDO &kp LC(Y)

#define U_BOOT &td_bootloader

/ {
  behaviors {
    // auto shift behavior copied from: https://github.com/serebrov/zmk-config/blob/master/config/microdox.keymap#L23-L36
    as: auto_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "AUTO_SHIFT";
        #binding-cells = <2>;
        tapping_term_ms = <200>;
        quick_tap_ms = <0>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <35>;    // <--- always produce the tap behavior if hold is interrupted by any key except the bottom right key
    };

    // Note: quick-release fixes the issue of sticky shift producing multiple upper case letters (see https://github.com/zmkfirmware/zmk/issues/903#issuecomment-909209198).
    skq: sticky_key_quick_release {
      compatible = "zmk,behavior-sticky-key";
      label = "STICKY_KEY_QUICK_RELEASE";
      #binding-cells = <1>;
      bindings = <&kp>;
      release-after-ms = <1000>;
      quick-release;
    };

    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <250>;
      require-prior-idle-ms = <200>;
      bindings = <&kp>, <&kp>;
    };

    lts: slow_layer_tap {
      compatible = "zmk,behavior-hold-tap";
      label = "SLOW_LAYER_TAP";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <350>;
      require-prior-idle-ms = <200>;
      bindings = <&mo>, <&kp>;
    };

    ltm: medium_layer_tap {
      compatible = "zmk,behavior-hold-tap";
      label = "MEDIUM_LAYER_TAP";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <250>;
      bindings = <&mo>, <&kp>;
    };

    ltf: fast_layer_tap {
      compatible = "zmk,behavior-hold-tap";
      label = "FAST_LAYER_TAP";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      bindings = <&mo>, <&kp>;
    };

    td_shift_ret: sticky_shift_return { \
      compatible = "zmk,behavior-tap-dance"; \
      label = "STICKY_SHIFT_RETURN"; \
      #binding-cells = <0>; \
      tapping-term-ms = <200>; \
      bindings = <&skq LSHFT>, <&kp RET>; \
    }; \

    td_num_ret: sticky_num_return { \
      compatible = "zmk,behavior-tap-dance"; \
      label = "STICKY_NUM_RETURN"; \
      #binding-cells = <0>; \
      tapping-term-ms = <200>; \
      bindings = <&sl U_NUM>, <&kp RET>; \
    }; \

    app_sw: app_switcher { \
      compatible = "zmk,behavior-tap-dance"; \
      label = "APP_SWITCHER"; \
      #binding-cells = <0>; \
      tapping-term-ms = <200>; \
      bindings = <&kp LA(TAB)>, <&kp LG(TAB)>; \
    }; \

    td_bootloader: double_tap_bootloader { \
      compatible = "zmk,behavior-tap-dance"; \
      label = "TD_BOOTLOADER"; \
      #binding-cells = <0>; \
      tapping-term-ms = <200>; \
      bindings = <&none>, <&bootloader>; \
    }; \

    u_to_U_BASE: double_tap_to_u_base { \
      compatible = "zmk,behavior-tap-dance"; \
      label = "DOUBLE_TAP_TO_U_BASE"; \
      #binding-cells = <0>; \
      tapping-term-ms = <200>; \
      bindings = <&none>, <&to U_BASE>; \
    }; \

    u_to_U_QWERTY: double_tap_to_u_qwerty { \
      compatible = "zmk,behavior-tap-dance"; \
      label = "DOUBLE_TAP_TO_U_QWERTY"; \
      #binding-cells = <0>; \
      tapping-term-ms = <200>; \
      bindings = <&none>, <&to U_QWERTY>; \
    }; \

    u_to_U_EXP: double_tap_to_u_exp { \
      compatible = "zmk,behavior-tap-dance"; \
      label = "DOUBLE_TAP_TO_U_EXP"; \
      #binding-cells = <0>; \
      tapping-term-ms = <200>; \
      bindings = <&none>, <&to U_EXP>; \
    }; \

    dot_mm: dot_colon {
      compatible = "zmk,behavior-mod-morph";
      label = "DOT_COLON";
      #binding-cells = <0>;
      bindings = <&kp DOT>, <&kp COLON>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    com_mm: comma_semi {
      compatible = "zmk,behavior-mod-morph";
      label = "COMMA_SEMI";
      #binding-cells = <0>;
      bindings = <&kp COMMA>, <&kp SEMI>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    lt_dot_mm: dot_colon_layer_tap {
      compatible = "zmk,behavior-hold-tap";
      label = "DOT_COLON_LAYER_TAP";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <350>;
      require-prior-idle-ms = <200>;
      bindings = <&mo>, <&dot_mm>;
    };

    lt_com_mm: comma_semi_layer_tap {
      compatible = "zmk,behavior-hold-tap";
      label = "COMMA_SEMI_LAYER_TAP";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <250>;
      bindings = <&mo>, <&com_mm>;
    };
  }; \

  macros {
    ZMK_MACRO(colonq,
        bindings = <&kp COLON &kp Q>;
    )
    ZMK_MACRO(colonw,
        bindings = <&kp COLON &kp W>;
    )
    ZMK_MACRO(colonwq,
        bindings = <&kp COLON &kp W &kp Q>;
    )
    ZMK_MACRO(colonqex,
        bindings = <&kp COLON &kp Q &kp EXCL>;
    )
    ZMK_MACRO(tabedit,
        bindings = <&kp COLON &kp T &kp A &kp B &kp E &kp D &kp I &kp T>;
    )
    ZMK_MACRO(leftarr,
        bindings = <&kp LT &kp MINUS>;
    )
    ZMK_MACRO(rightarr,
        bindings = <&kp MINUS &kp GT>;
    )
    ZMK_MACRO(ellipsis,
        bindings = <&kp DOT &kp DOT &kp DOT>;
    )
    ZMK_MACRO(paren_macro,
        bindings = <&kp LPAR &kp RPAR &kp LEFT>;
    )
    ZMK_MACRO(bkt_macro,
        bindings = <&kp LBKT &kp RBKT &kp LEFT>;
    )
    ZMK_MACRO(brc_macro,
        bindings = <&kp LBRC &kp RBRC &kp LEFT>;
    )
    ZMK_MACRO(dqt_macro,
        bindings = <&kp DQT &kp DQT &kp LEFT>;
    )
    ZMK_MACRO(angbrc_macro,
        bindings = <&kp LT &kp GT &kp LEFT>;
    )
    ZMK_MACRO(fifteen_stars,
        bindings = <&kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp SPC>;
    )
    ZMK_MACRO(todo_macro,
        bindings
            = <&macro_press &kp LSHFT>
            , <&macro_tap &kp T &kp O &kp D &kp O &kp SPC>
            , <&macro_release &kp LSHFT>
            ;
    )
  };

  combos {
    compatible = "zmk,combos";

    combo_tab {
        timeout-ms = <30>;
        key-positions = <3 4>;
        bindings = <&kp TAB>;
    };

    combo_esc {
        timeout-ms = <30>;
        key-positions = <13 14>;
        bindings = <&kp ESC>;
    };

    combo_del {
        timeout-ms = <30>;
        key-positions = <23 24>;
        bindings = <&kp DEL>;
    };

    combo_bspc {
        timeout-ms = <30>;
        key-positions = <5 6>;
        bindings = <&kp BSPC>;
    };

    combo_ret {
        timeout-ms = <30>;
        key-positions = <15 16>;
        bindings = <&kp RET>;
    };

    combo_paren {
        timeout-ms = <30>;
        key-positions = <25 26>;
        bindings = <&paren_macro>;
    };
  };


  keymap {
    compatible = "zmk,keymap";

                base_layer {
                      bindings = <
&kp Q          &kp W        &kp F           &kp P           &kp B          &kp J   &kp L           &kp U        &kp Y                 AS(SQT)
&hm LGUI A     &hm LALT R   &hm LCTRL S     &hm LSHFT T     &kp G          &kp M   &hm LSHFT N     &hm LCTRL E  &hm LALT I            &hm LGUI O
&ltm U_MACRO Z &lts U_FUN X &hm RALT C      &ltm U_SYM D    &kp V          &kp K   &kp H           AS(SLASH)    &lt_dot_mm U_MEDIA 0  &lt_com_mm U_MACRO 0
                          &app_sw     &td_num_ret   &ltf U_NAV SPC        &ltf U_NAV LC(BSPC)     &td_shift_ret  &key_repeat
                        >;
                };

                qwerty_layer {
                      bindings = <
&kp Q          &kp W          &kp E        &kp R           &kp T          &kp Y          &kp U           &kp I        &kp O                 &kp P
&hm LGUI A     &hm LALT S     &hm LCTRL D  &hm LSHFT F     &kp G          &kp H          &hm LSHFT J     &hm LCTRL K  &hm LALT L            &hm LGUI SQT
&ltm U_MACRO Z &lts U_FUN X   &hm RALT C   &ltm U_SYM V    &kp B          &kp N          &kp M           &com_mm      &lt_dot_mm U_MEDIA 0  &ltm U_MACRO SLASH
                        &app_sw     &td_num_ret    &ltf U_NAV SPC        &ltf U_NAV LC(BSPC)     &td_shift_ret  &key_repeat
                        >;
                };

                exp_layer {
                      bindings = <
&none   &none  &none  &none  &none &none  &none  &none  &none  &none
&none   &none  &none  &none  &none &none  &none  &none  &none  &none
&none   &none  &none  &none  &none &none  &none  &none  &none  &none
     &none  &none &ltf U_NAV SPC &ltf U_NAV SPC &none &none
                        >;
                };

                macro_layer {
                      bindings = <
&colonq     &colonw      &colonwq     &colonqex  &tabedit      &none        &none        &kp RA(Y)      &kp LPAR          &kp RPAR
&kp RA(Q)   &brc_macro   &kp RA(S)    &bkt_macro &angbrc_macro &todo_macro  &dqt_macro   &paren_macro   &fifteen_stars    &kp RA(P)
&trans      &none        &kp C_VOL_DN &kp C_VOL_UP &kp C_MUTE  &kp LT       &leftarr     &ellipsis      &rightarr         &kp GT
                         &none        &none      &none         &none        &none        &none
                        >;
                };

                nav_layer {
                      bindings = <
&kp PG_UP   &kp HOME    &kp UP      &kp END     &kp INS          &none          &u_to_U_BASE    &u_to_U_QWERTY     &u_to_U_EXP  U_BOOT
&kp PG_DN   &kp LEFT    &kp DOWN    &kp RIGHT   &caps_word       &kp CAPSLOCK   &kp LSHFT       &kp LCTRL         &kp LALT     &kp LGUI
&none       &none       &none       &kp BSPC    &kp DEL          &none          &none           &none             &none        &none
                           &kp K_APP   &kp RET   &trans          &trans          &kp RET         &kp ESC
                        >;
                };

                media_layer {
                      bindings = <
&kp C_MUTE   &none        &kp C_VOL_UP &none        &none           &none   &u_to_U_BASE   &u_to_U_QWERTY  &u_to_U_EXP  U_BOOT
&none        &kp C_PREV   &kp C_VOL_DN &kp C_NEXT   &none           &none   &kp LSHFT      &kp LCTRL      &kp LALT     &kp LGUI
&bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &out OUT_TOG    &none   &none          &none          &trans       &none
                          &bt BT_CLR   &kp C_PP     &kp C_STOP      &none   &none          &none
                        >;
                };

                num_layer {
                      bindings = <
&kp LC(LG(LEFT))  &kp LC(LG(RIGHT))   &kp TAB    &kp DEL         &kp ESC       AS(LBKT)   AS(N7)     AS(N8)  AS(N9)  AS(RBKT)
&kp LGUI          &kp LALT            &kp LCTRL  &hm LSHFT SLASH &kp QMARK     AS(EQL)    AS(N4)     AS(N5)  AS(N6)  AS(MINUS)
U_UND             U_CUT               U_CPY      U_PST           U_RDO         AS(BSLH)   AS(N1)     AS(N2)  AS(N3)  AS(GRAVE)
                                      &kp ESC    &trans          &kp ASTRK     &kp UNDER  AS(N0)     &kp DOT
                        >;
                };

                sym_layer {
                      bindings = <
U_BOOT   &u_to_U_EXP  &u_to_U_QWERTY &u_to_U_BASE  &none    &kp LBRC   &kp AMPS  &kp ASTRK  &kp LPAR   &kp RBRC
&kp LGUI &kp LALT     &kp LCTRL      &kp LSHFT     &none    &kp PLUS   &kp DLLR  &kp PRCT   &kp CRRT   &kp UNDER
&none    &none        &kp RALT       &trans        &none    &kp PIPE   &kp EXCL  &kp AT     &kp HASH   &kp TILDE
                      &none          &none         &none    &kp MINUS  &kp RPAR  &none
                        >;
                };

                fun_layer {
                      bindings = <
U_BOOT    &u_to_U_EXP  &u_to_U_QWERTY &u_to_U_BASE  &none     &kp PSCRN        &kp F7   &kp F8   &kp F9   &kp F12
&kp LGUI  &kp LALT     &kp LCTRL      &kp LSHFT     &none     &kp SLCK         &kp F4   &kp F5   &kp F6   &kp F11
&none     &trans       &kp RALT       &none         &none     &kp PAUSE_BREAK  &kp F1   &kp F2   &kp F3   &kp F10
                       &none          &none         &none     &none          &none  &none
                        >;
                };
  };
};
