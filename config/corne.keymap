/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Note: quick-release fixes the issue of sticky shift producing multiple upper case letters (see https://github.com/zmkfirmware/zmk/issues/903#issuecomment-909209198).
// This sk config no longer allows for sticky mods to be chained -- again, see the above github issue for a solution if that's the case.
&sk {
    release-after-ms = <1000>;
    quick-release;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_f1 {
            timeout-ms = <50>;
            key-positions = <1 13>;
            bindings = <&kp F1>;
        };

        combo_f2 {
            timeout-ms = <50>;
            key-positions = <2 14>;
            bindings = <&kp F2>;
        };

        combo_f3 {
            timeout-ms = <50>;
            key-positions = <3 15>;
            bindings = <&kp F3>;
        };

        combo_f4 {
            timeout-ms = <50>;
            key-positions = <4 16>;
            bindings = <&kp F4>;
        };

        combo_f5 {
            timeout-ms = <50>;
            key-positions = <5 17>;
            bindings = <&kp F5>;
        };

        combo_f6 {
            timeout-ms = <50>;
            key-positions = <6 18>;
            bindings = <&kp F6>;
        };

        combo_f7 {
            timeout-ms = <50>;
            key-positions = <7 19>;
            bindings = <&kp F7>;
        };

        combo_f8 {
            timeout-ms = <50>;
            key-positions = <8 20>;
            bindings = <&kp F8>;
        };

        combo_f9 {
            timeout-ms = <50>;
            key-positions = <9 21>;
            bindings = <&kp F9>;
        };

        combo_f10 {
            timeout-ms = <50>;
            key-positions = <10 22>;
            bindings = <&kp F10>;
        };

        combo_f11 {
            timeout-ms = <50>;
            key-positions = <11 23>;
            bindings = <&kp F11>;
        };

        combo_f12 {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp F12>;
        };

        combo_scrnsht {
            timeout-ms = <50>;
            key-positions = <1 25>;
            bindings = <&kp LG(LS(S))>;
        };

        combo_volmute {
            timeout-ms = <50>;
            key-positions = <13 25>;
            bindings = <&kp C_MUTE>;
        };

        combo_voldn {
            timeout-ms = <50>;
            key-positions = <14 26>;
            bindings = <&kp C_VOL_DN>;
        };

        combo_volup {
            timeout-ms = <50>;
            key-positions = <15 27>;
            bindings = <&kp C_VOL_UP>;
        };

        combo_pworkspace {
            timeout-ms = <50>;
            key-positions = <16 28>;
            bindings = <&kp LC(LG(LEFT))>;
        };

        combo_nworkspace {
            timeout-ms = <50>;
            key-positions = <17 29>;
            bindings = <&kp LC(LG(RIGHT))>;
        };

        combo_left {
            timeout-ms = <50>;
            key-positions = <18 30>;
            bindings = <&kp LEFT>;
        };

        combo_down {
            timeout-ms = <50>;
            key-positions = <19 31>;
            bindings = <&kp DOWN>;
        };

        combo_up {
            timeout-ms = <50>;
            key-positions = <20 32>;
            bindings = <&kp UP>;
        };

        combo_right {
            timeout-ms = <50>;
            key-positions = <21 33>;
            bindings = <&kp RIGHT>;
        };

        combo_pgdn {
            timeout-ms = <50>;
            key-positions = <22 34>;
            bindings = <&kp PG_DN>;
        };

        combo_pgup {
            timeout-ms = <50>;
            key-positions = <23 35>;
            bindings = <&kp PG_UP>;
        };

        combo_lgui {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp LGUI>;
        };

        combo_lalt {
            timeout-ms = <50>;
            key-positions = <33 34>;
            bindings = <&kp LALT>;
        };
    };

    keymap {
      compatible = "zmk,keymap";

                default_layer {
// ------------------------------------------------------------------------------------------------------------
// |  TAB  |  Q  |  W  |  E   |   R   |  T     |    |  Y    |  U   |  I    |  O   |   P   |   \   |
// |  CAPS |  A  |  S  |  D   |   F   |  G     |    |  H    |  J   |  K    |  L   |   '   |   ;   |
// | SHIFT |  Z  |  X  |  C   |   V   |  B     |    |  N    |  M   |  ,    |  .   |   /   | SHIFT |
//                     | menu | ENTER |[sticky-|    | SPACE | BSPC | del   |
//               hold: | (alt)| (NAV)| -shift]|    | (SYM) | (NUM)|(RAISE)|
                      bindings = <
  &kp TAB             &kp Q     &kp W     &kp E      &kp R         &kp T        &kp Y        &kp U       &kp I       &kp O     &kp P     &kp BSLH
  &mt LCTRL CAPSLOCK  &kp A     &kp S     &kp D      &kp F         &kp G        &kp H        &kp J       &kp K       &kp L     &kp SQT   &mt RCTRL SEMI
  &mt LSHFT           &kp Z     &kp X     &kp C      &kp V         &kp B        &kp N        &kp M       &kp COMMA   &kp DOT   &kp FSLH  &mt RSHFT
                                  &mt LALT K_CMENU   &lt 4 RET     &sk LSHFT    &lt 2 SPACE  &lt 1 BSPC  &lt 3 DELETE
                        >;
                };




                num_layer {
      bindings = <
  &trans  &kp LBKT   &kp N7  &kp N8  &kp N9  &kp RBKT     &none   &none       &none      &none     &none     &trans
  &trans  &kp SEMI   &kp N4  &kp N5  &kp N6  &kp EQL      &none   &kp LSHFT   &kp LCTRL  &kp LALT  &kp LGUI  &trans
  &trans  &kp GRAVE  &kp N1  &kp N2  &kp N3  &kp BSLH     &none   &none       &trans     &trans    &trans    &trans
                             &kp DOT &kp N0  &kp MINUS    &trans  &trans      &trans
                        >;
                };




                sym_layer {
      bindings = <
  &trans  &kp LBRC   &kp AMPS  &kp ASTRK  &kp LPAR  &kp RBRC      &none  &none      &none      &none     &none     &trans
  &trans  &kp COLON  &kp DLLR  &kp PRCT   &kp CRRT  &kp PLUS      &none  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
  &trans  &kp TILDE  &kp EXCL  &kp AT     &kp HASH  &kp PIPE      &none  &none      &none      &trans    &trans    &trans
                               &kp LPAR   &kp RPAR  &kp UNDER     &trans  &trans    &trans
                        >;
                };




                raise_layer {
// ------------------------------------------------------------------------------------------------------------
// | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5    |   |LC(<-)|LC(pgup)|LC(pgdn)|LC(->)| PSCRN    |       |
// |OUT_TOG|     |     |      |      |         |   |  <-  |   v   |  ^    |  ->    | CAPSWORD |       |
// |       |     |     |      |      |         |   | home |  pg dn| pf up |  end   | INSERT   |       |
//                     |      |      |         |   |      |       |       |
      bindings = <
  &bt BT_CLR     &bt BT_SEL 0   &bt BT_SEL 1      &bt BT_SEL 2  &bt BT_SEL 3 &bt BT_SEL 4    &kp LC(LEFT) &kp LC(PG_UP) &kp LC(PG_DN) &kp LC(RIGHT) &kp PSCRN     &trans
  &out OUT_TOG   &trans         &trans            &trans        &trans       &trans          &kp LEFT     &kp DOWN      &kp UP        &kp RIGHT     &caps_word    &trans
  &trans         &trans         &trans            &trans        &trans       &trans          &kp HOME     &kp PG_DN     &kp PG_UP     &kp END       &kp INSERT    &trans
                                                  &trans        &trans       &trans         &trans       &trans        &trans
                        >;
                };



                nav_layer {
// ------------------------------------------------------------------------------------------------------------
// |       |     |     |      |      |         |   |LC(<-)|LC(pgup)|LC(pgdn)|LC(->)| PSCRN  |       |
// |       | LGUI| LALT| LCTRL| LSHFT|         |   |  <-  |   v   |  ^    |  ->    |CAPSWORD|       |
// |       |     |     |      |      |         |   | home |  pg dn| pf up |  end   | INSERT |       |
//                     |      |      |         |   |      |       |       |
      bindings = <
  &trans   &trans   &trans   &trans      &trans      &trans      &kp LC(LEFT) &kp LC(PG_UP) &kp LC(PG_DN) &kp LC(RIGHT) &kp PSCRN     &trans
  &trans   &sk LGUI &sk LALT &sk LCTRL   &sk LSHFT   &trans      &kp LEFT     &kp DOWN      &kp UP        &kp RIGHT     &caps_word    &trans
  &trans   &trans   &trans   &trans      &trans      &trans      &kp HOME     &kp PG_DN     &kp PG_UP     &kp END       &kp INSERT    &trans
                             &trans      &trans      &trans      &kp SPACE    &kp BSPC      &kp DELETE
                        >;
                };
        };
};
