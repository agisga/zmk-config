#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>


#define L_BASE    0
#define L_NAV     1
#define L_NUM     2
#define L_MACRO   3
#define L_FUN     4

#define AS(keycode) &as LS(keycode) keycode

#define WIN_UND &kp LC(Z)
#define WIN_CUT &kp LC(X)
#define WIN_CPY &kp LC(C)
#define WIN_PST &kp LC(V)


/ {
  behaviors {
    // auto shift behavior copied from: https://github.com/serebrov/zmk-config/blob/master/config/microdox.keymap#L23-L36
    as: auto_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "AUTO_SHIFT";
        #binding-cells = <2>;
        tapping_term_ms = <250>;
        quick_tap_ms = <150>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };

    // Note: quick-release fixes the issue of sticky shift producing multiple upper case letters (see https://github.com/zmkfirmware/zmk/issues/903#issuecomment-909209198).
    skq: sticky_key_quick_release {
      compatible = "zmk,behavior-sticky-key";
      label = "STICKY_KEY_QUICK_RELEASE";
      #binding-cells = <1>;
      bindings = <&kp>;
      release-after-ms = <2000>;
      quick-release;
      ignore-modifiers;
    };

    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <250>;
      require-prior-idle-ms = <200>;
      quick_tap_ms = <150>;
      bindings = <&kp>, <&kp>;
    };

    ltf: fast_layer_tap {
      compatible = "zmk,behavior-hold-tap";
      label = "FAST_LAYER_TAP";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      bindings = <&mo>, <&kp>;
    };

    lts: slow_layer_tap {
      compatible = "zmk,behavior-hold-tap";
      label = "SLOW_LAYER_TAP";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <300>;
      bindings = <&mo>, <&kp>;
    };
  }; \

  macros {
    ZMK_MACRO(paren_macro,
        bindings = <&kp LPAR &kp RPAR &kp LEFT>;
    )
    ZMK_MACRO(bkt_macro,
        bindings = <&kp LBKT &kp RBKT &kp LEFT>;
    )
    ZMK_MACRO(brc_macro,
        bindings = <&kp LBRC &kp RBRC &kp LEFT>;
    )
    ZMK_MACRO(dqt_macro,
        bindings = <&kp DQT &kp DQT &kp LEFT>;
    )
    ZMK_MACRO(rassign_macro,
        bindings = <&kp LT &kp MINUS>;
    )
    ZMK_MACRO(app_sw,
        bindings
            = <&macro_press &kp LALT &mo L_NAV>
            , <&macro_tap &kp TAB>
            , <&macro_pause_for_release>
            , <&macro_release &kp LALT &mo L_NAV>
            ;
    )
  };

  combos {
    compatible = "zmk,combos";

    combo_fg {
        timeout-ms = <30>;
        key-positions = <13 14>;
        bindings = <&app_sw>;
        slow-release;  // to keep alt from the macro held with one finger while repeatedly hitting tab with the other finger
    };

    combo_jkl {
        timeout-ms = <30>;
        key-positions = <16 17 18>;
        bindings = <&kp RET>;
    };
  };


  keymap {
    compatible = "zmk,keymap";

                base_layer {
                      bindings = <
&kp Q          &kp W          &kp E        &kp R           &kp T          &kp Y          &kp U           &kp I            &kp O           &kp P
&hm LGUI A     &hm LALT S     &hm LCTRL D  &hm LSHFT F     &kp G          &kp H          &hm LSHFT J     &hm LCTRL K      &hm LALT L      &hm LGUI SQT
&skq LSHFT     &kp Z          &kp X        &kp C           &kp V          &kp B          &kp COMMA       &kp BSPC         &kp DOT         &kp SLASH
                          &mkp LCLK     &sl L_MACRO    &ltf L_NAV  SPC    &ltf L_NUM N   &lts L_FUN M    &kp RET
                        >;
                };

                nav_layer {
                      bindings = <
&msc SCRL_LEFT &msc SCRL_UP  &msc SCRL_DOWN  &msc SCRL_RIGHT  &none         &kp HOME      &kp PG_DN   &kp PG_UP     &kp END       &kp INS
&kp LGUI       &kp LALT      &kp LCTRL       &kp LSHFT        &kp TAB       &kp LEFT      &kp DOWN    &kp UP        &kp RIGHT     &kp K_APP
&kp RET        &kp LC(BSPC)  &kp BSPC        &kp DEL          &kp ESC       &kp ESC       &kp DEL     &kp BSPC      &kp LC(BSPC)  &kp RET
                             &mo L_FUN       &none            &trans        &kp TAB       &caps_word  &mo L_FUN

                        >;
                };

                num_layer {
                      bindings = <
&kp LBKT      &kp N7    &kp N8    &kp N9    &kp RBKT       &kp LBRC   &kp AMPERSAND    &kp STAR          &kp LPAR        &kp RBRC
&kp MINUS     &kp N4    &kp N5    &kp N6    &kp EQUAL      &kp PLUS   &hm LSHFT DOLLAR &hm LCTRL PERCENT &hm LALT CARET  &hm LGUI RPAR
&kp SEMI      &kp N1    &kp N2    &kp N3    &kp COLON      &kp GRAVE  &kp  EXCL        &kp AT            &kp HASH        &kp BACKSLASH
                        &kp TILDE &kp N0    &kp UNDER      &trans     &kp DOT       &kp PIPE
                        >;
                };

                macro_layer {
                      bindings = <
&kp LC(LG(LEFT))  &kp LC(LG(RIGHT))   &kp C_VOL_DN      &kp C_VOL_UP &kp C_MUTE    &none             &kp RA(Y)        &none           &kp RA(P)         &none
&kp RA(Q)         &kp RA(S)           &kp LC(LS(TAB))   &kp LC(TAB)  &kp LG(TAB)   &kp LS(LG(LEFT))  &kp LS(LG(DOWN)) &kp LS(LG(UP))  &kp LS(LG(RIGHT)) &none
&kp LA(LEFT)      WIN_UND             WIN_CUT           WIN_CPY      WIN_PST       &rassign_macro    &dqt_macro       &paren_macro    &bkt_macro        &brc_macro
                                      &trans            &trans       &trans        &kp LC(LG(F7))    &kp LA(LG(SPC))  &trans
                        >;
                };

                fun_layer {
                      bindings = <
&none        &none        &none        &none         &none         &none       &kp F7   &kp F8   &kp F9   &kp F12
&none        &none        &none        &out OUT_TOG  &sys_reset    &sys_reset  &kp F4   &kp F5   &kp F6   &kp F11
&bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3  &bootloader   &bootloader &kp F1   &kp F2   &kp F3   &kp F10
                                      &none   &bt BT_CLR   &none   &none  &none  &none
                        >;
                };
        };
};
