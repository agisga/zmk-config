// ************************************* 
// *************** FIXME ***************
// 2023-02-12: Outdated. See minidox.keymap
// *************************************

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>


#define L_BASE   0
#define L_QWERTY 1
#define L_NAV    2
#define L_NUM    3
#define L_FUN    4

#define AS(keycode) &as LS(keycode) keycode

#define WIN_UND &kp LC(Z)
#define WIN_CUT &kp LC(X)
#define WIN_CPY &kp LC(C)
#define WIN_PST &kp LC(V)


/ {
  behaviors {
    // auto shift behavior copied from: https://github.com/serebrov/zmk-config/blob/master/config/microdox.keymap#L23-L36
    as: auto_shift {
        compatible = "zmk,behavior-hold-tap";
        label = "AUTO_SHIFT";
        #binding-cells = <2>;
        tapping_term_ms = <200>;
        quick_tap_ms = <0>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <35>;    // <--- always produce the tap behavior if hold is interrupted by any key except the bottom right key
    };

    // Note: quick-release fixes the issue of sticky shift producing multiple upper case letters (see https://github.com/zmkfirmware/zmk/issues/903#issuecomment-909209198).
    skq: sticky_key_quick_release {
      compatible = "zmk,behavior-sticky-key";
      label = "STICKY_KEY_QUICK_RELEASE";
      #binding-cells = <1>;
      bindings = <&kp>;
      release-after-ms = <1000>;
      quick-release;
    };

    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <250>;
      require-prior-idle-ms = <200>;
      bindings = <&kp>, <&kp>;
    };

    ltf: fast_layer_tap {
      compatible = "zmk,behavior-hold-tap";
      label = "FAST_LAYER_TAP";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      bindings = <&mo>, <&kp>;
    };

    app_sw: app_switcher { \
      compatible = "zmk,behavior-tap-dance"; \
      label = "APP_SWITCHER"; \
      #binding-cells = <0>; \
      tapping-term-ms = <200>; \
      bindings = <&kp LA(TAB)>, <&kp LG(TAB)>; \
    }; \
  }; \

  macros {
    ZMK_MACRO(colonq,
        bindings = <&kp COLON &kp Q>;
    )
    ZMK_MACRO(colonw,
        bindings = <&kp COLON &kp W>;
    )
    ZMK_MACRO(colonwq,
        bindings = <&kp COLON &kp W &kp Q>;
    )
    ZMK_MACRO(colonqex,
        bindings = <&kp COLON &kp Q &kp EXCL>;
    )
    ZMK_MACRO(tabedit,
        bindings = <&kp COLON &kp T &kp A &kp B &kp E &kp D &kp I &kp T>;
    )
    ZMK_MACRO(ellipsis,
        bindings = <&kp DOT &kp DOT &kp DOT>;
    )
    ZMK_MACRO(paren_macro,
        bindings = <&kp LPAR &kp RPAR &kp LEFT>;
    )
    ZMK_MACRO(bkt_macro,
        bindings = <&kp LBKT &kp RBKT &kp LEFT>;
    )
    ZMK_MACRO(brc_macro,
        bindings = <&kp LBRC &kp RBRC &kp LEFT>;
    )
    ZMK_MACRO(dqt_macro,
        bindings = <&kp DQT &kp DQT &kp LEFT>;
    )
    ZMK_MACRO(fifteen_stars,
        bindings = <&kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp ASTRK &kp SPC>;
    )
    ZMK_MACRO(todo_macro,
        bindings
            = <&macro_press &kp LSHFT>
            , <&macro_tap &kp T &kp O &kp D &kp O &kp SPC>
            , <&macro_release &kp LSHFT>
            ;
    )
  };

  combos {
    compatible = "zmk,combos";

    combo_cbspc {
        timeout-ms = <30>;
        key-positions = <31 32 33>;
        bindings = <&kp LC(BSPC)>;
    };

    combo_qwerty {
        timeout-ms = <30>;
        key-positions = <25 26 27 28>;
        bindings = <&tog L_QWERTY>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

                base_layer {
                      bindings = <
&kp TAB        &kp Q          &kp W        &kp F        &kp P           &kp G          &kp J   &kp L           &kp U        &kp Y           AS(SEMI)         &kp BSPC
&kp ESC        &hm LGUI A     &hm LALT R   &hm LCTRL S  &hm LSHFT T     &kp D          &kp H   &hm LSHFT N     &hm LCTRL E  &hm LALT I      &hm LGUI O       AS(SQT)
&kp DEL        &kp Z          &kp X        &kp C        &kp V           &kp B          &kp K   &kp M           AS(COMMA)    AS(DOT)         AS(SLASH)        &kp RET
                                                    &app_sw  &sl L_NUM  &ltf L_NAV SPC  &skq LSHFT &sl L_FUN
                        >;
                };

                qwerty_layer {
                      bindings = <
&kp TAB      &kp Q           &kp W          &kp E        &kp R           &kp T    &kp Y    &kp U           &kp I            &kp O           &kp P          &kp BSPC
&kp ESC      &hm LGUI A      &hm LALT S     &hm LCTRL D  &hm LSHFT F     &kp G    &kp H    &hm LSHFT J     &hm LCTRL K      &hm LALT L      &hm LGUI SEMI  AS(SQT)
&kp DEL      &kp Z           &kp X          &kp C        &kp V           &kp B    &kp N    &kp M           AS(COMMA)        AS(DOT)         AS(SLASH)      &kp RET
                                                    &app_sw  &sl L_NUM  &ltf L_NAV SPC  &skq LSHFT  &sl L_FUN
                        >;
                };

                nav_layer {
                      bindings = <
&none  &kp PG_UP   &kp HOME     &kp UP       &kp END     &kp INS          &fifteen_stars &kp RA(Q)        &kp RA(Y)            &kp RA(S)       &kp RA(P) &none
&none  &kp PG_DN   &kp LEFT     &kp DOWN     &kp RIGHT   &kp TAB          &todo_macro    &kp LSHFT        &kp LCTRL            &kp LALT        &kp LGUI    &none
&none  &none       &kp C_VOL_DN &kp C_VOL_UP &kp BSPC    &kp DEL          &ellipsis      &dqt_macro       &paren_macro         &bkt_macro      &brc_macro  &none
                                            &kp K_APP  &kp RET   &trans   &kp C_MUTE  &kp ESC
                        >;
                };

                num_layer {
                      bindings = <
&none &kp LC(LG(LEFT))  &kp LC(LG(RIGHT)) &kp TAB    &kp K_APP &kp ESC      AS(LBKT)   AS(N7)     AS(N8)  AS(N9)  AS(RBKT)   &none
&none &kp LGUI          &kp LALT          &kp LCTRL  &kp LSHFT &kp CAPS     AS(EQL)    AS(N4)     AS(N5)  AS(N6)  AS(MINUS)  &none
&none WIN_UND           WIN_CUT           WIN_CPY    WIN_PST   &kp DEL      AS(BSLH)   AS(N1)     AS(N2)  AS(N3)  AS(GRAVE)  &none
                                                     &none  &trans  AS(UNDER)  AS(N0)  &key_repeat
                        >;
                };

                fun_layer {
                      bindings = <
&none &colonq            &colonw      &colonwq         &colonqex        &tabedit            &kp PSCRN  &kp F7   &kp F8   &kp F9   &kp F12  &none
&none &ext_power EP_TOG  &none        &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &rgb_ug RGB_TOG     &none      &kp F4   &kp F5   &kp F6   &kp F11  &none
&none &bt BT_SEL 0       &bt BT_SEL 1 &bt BT_SEL 2     &bt BT_SEL 3     &out OUT_TOG        &none      &kp F1   &kp F2   &kp F3   &kp F10  &none
                                                                    &bt BT_CLR  &none  &none  &none  &trans
                        >;
                };
        };
};
